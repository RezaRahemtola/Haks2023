#import "association.jsligo" "Association"
#import "errors.jsligo" "Errors"
#import "parameters.jsligo" "Parameters"
#import "storage.jsligo" "Storage"
#import "utils.jsligo" "Utils"

type parameters = Parameters.main_parameters;
type storage = Storage.main_storage;
type return_ = [list<operation>, storage];

const burn_address = "tz1burnburnburnburnburnburnburjAYjjX" as address;

const registerAssociation = (params: Parameters.register_association, store: storage): return_ => {
  assert_none_with_error(Map.find_opt(Tezos.get_sender(), store.associations), Errors.already_registered);

  let [operation, contractAddress] = Association.createSubcontract(store.baker, params.name);

  return [
    list([operation]), {...store,
      associations: Map.add(Tezos.get_sender(), contractAddress, store.associations)
    }
  ];
}

const claimFees = (store: storage) => {
  assert_with_error(Tezos.get_sender() == store.ownerAddress, Errors.not_owner);
  assert_with_error(Tezos.get_balance() > (0 as tez), Errors.no_fees);

  return [
    list([
      Tezos.transaction(unit, Tezos.get_balance(), Tezos.get_contract_with_error(Tezos.get_sender(), Errors.invalid_address))
    ]), store
  ];
}

const changeOwner = (params: Parameters.change_owner, store: storage): return_ => {
  Utils.assert_is_owner(store);
  assert_with_error(params.ownerAddress != store.ownerAddress, Errors.already_owner);
  assert_with_error(params.ownerAddress != burn_address, Errors.invalid_address);

  return [
    list([]), {...store, ownerAddress: params.ownerAddress}
  ];
}

const changeBaker = (params: Parameters.change_baker, store: storage): return_ => {
  assert_with_error(Tezos.get_sender() == store.ownerAddress, Errors.not_owner);
  assert_with_error(params.baker != store.baker, Errors.already_baker);

  return [
    list([
      Tezos.set_delegate(Some(params.baker))
    ]), {...store, baker: params.baker}
  ];
}

// @view
const getFeePercentage = ([_, store]: [unit, storage]): nat => { 
    return store.feePercentage;
};

const main = (action: parameters, store: storage) : return_ => {
  return match (action, {
        RegisterAssociation: (p: Parameters.register_association) => registerAssociation(p, store),
        ChangeOwner: (p: Parameters.change_owner) => changeOwner(p, store),
        ChangeBaker: (p: Parameters.change_baker) => changeBaker(p, store),
        ClaimFees: () => claimFees(store),
    });
};
