#import "errors.jsligo" "Errors"
#import "listUtils.jsligo" "ListUtils"

export type player = address;
export type round = nat;
export type action = ["Stone"] | ["Paper"] | ["Cisor"];
export type result = ["Inplay"] | ["Draw"] | ["Winner", address];

type an_action<a> = {
    player : player,
    action : a 
};

export type player_action = an_action<bytes>;
export type decoded_player_action = an_action<action>;

export type player_actions = list<player_action>;
export type decoded_player_actions = list<decoded_player_action>;

export type rounds<a> = map<round, list<an_action<a>> >;

type board = map<round, option<player> >;

export type t = {
    total_rounds : nat,
    players : list<player>,
    current_round : nat,
    rounds : rounds<bytes>,
    decoded_rounds : rounds<action>,
    board : board,
    result : result,
    asleep : timestamp,
    pool : tez     //bet pool in tez. 1 tez / round play movement
};

export const new = (total_rounds : nat, players : list<player>): t => {
    return { 
      asleep:(Tezos.get_now ()) + 600,
      total_rounds:total_rounds,
      players:players,
      current_round:(1 as nat),
      rounds:(Map.empty as rounds<bytes>),
      decoded_rounds:(Map.empty as rounds<action>),
      board:(Map.empty as board),
      result: Inplay(),
      pool : 0 as tez
    };  
};

export const get_round_actions = (roundId : nat, session : t) : player_actions => {
    return match (Map.find_opt(roundId, session.rounds), { 
        None: () => failwith(Errors.missing_all_bytes),
        Some: (round_actions: player_actions) => round_actions 
    });
};

// @inline
const get_decoded_round_actions = (roundId : nat, session : t) : decoded_player_actions => {
    return match (Map.find_opt(roundId, session.decoded_rounds), { 
        None: () => failwith(Errors.missing_all_decoded_bytes),
        Some: (decoded_round_actions: decoded_player_actions) => decoded_round_actions 
    });
};

export const update_rounds = (session : t, rounds :  map<round, player_actions>): t => {
    return { ...session, asleep:(Tezos.get_now ()) + 600, rounds:rounds }    
};

export const update_decoded_rounds = (session : t, decoded_rounds : map<round, decoded_player_actions>): t => {
    return { ...session, asleep:(Tezos.get_now ()) + 600, decoded_rounds:decoded_rounds };
};


export const find_missing = <_a>(pactions : list<an_action<_a>>, all_players : list<player>) => {
    let addIfNotParticipant = ([acc, elt] : [list<player>, player]) : list<player> =>  
        match(ListUtils.find_opt( ((paction : an_action<_a>) => paction.player == elt), pactions ), {
            None : () => list([elt,...acc]) ,
            Some : (_an : an_action<_a>) => acc
        });
    return List.fold(addIfNotParticipant, all_players, list([]) as list<player>); 
};

// @inline
const has_played = <_a>(pactions : list<an_action<_a>>, player : player) : bool => {
    let check_contains = ([acc, elt] : [bool, an_action<_a>]) : bool => { if (acc) { return acc } else { return (elt.player == player) } };
    return List.fold(check_contains, pactions, false); 
};

// @inline
const has_played_round = <_a>(rounds : rounds<_a>, roundId : round, player : player) : bool => {
    return match (Map.find_opt(roundId, rounds), {
        Some: (acts: list<an_action<_a>>) => has_played(acts, player),
        None: () => false 
    });
};

export const add_in_decoded_rounds = (roundId : nat, session : t, user : address, decoded_action : action) : rounds<action> => {
    return match (Map.find_opt(roundId, session.decoded_rounds), { 
        None: () => Map.add(roundId, list([{ player:user, action:decoded_action }]), session.decoded_rounds),
        Some: (decodedPlayerActions : list<an_action<action>>) => {
            let _check_player_has_revealed_this_round = assert_with_error( (has_played_round(session.decoded_rounds, roundId, user) == false), Errors.user_already_revealed);
            return Map.update(roundId, (Some( list([ {player:user, action:decoded_action}, ...decodedPlayerActions]))), session.decoded_rounds);
        }
    });
};

export const add_in_rounds = (roundId : nat, session : t, user : address, action : bytes) : rounds<bytes> => {
    return match (Map.find_opt(roundId, session.rounds), { 
        None: () => Map.add(roundId, list([{player:user, action:action}]), session.rounds),
        Some: (playerActions: list<an_action<bytes>>) => {
            let _check_player_has_played_this_round = assert_with_error( (has_played_round(session.rounds, roundId, user) == false), Errors.user_already_played);
            return Map.update(roundId, (Some( list([ {player:user, action:action},  ...playerActions]))), session.rounds);
        }
    });
};

export const get_bytes_exn = (user : address, actions_opt : option<player_actions>) : bytes => {
    let find_bytes = (addr : address, lst_opt : option<player_actions>) : option<bytes> => {
        return match (lst_opt, {
            None: () => (None() as option<bytes>),
            Some: (lst: player_actions) => (match (List.head_opt(lst), {
                None: () => (None() as option<bytes>),
                Some: (elt: player_action) => { 
                        if (elt.player == addr) {
                            return (Some(elt.action) as option<bytes>)
                        } else {
                            return find_bytes(addr, List.tail_opt(lst));
                        }
                    }
                }))
        });
    };
    return match (find_bytes(user, actions_opt), {
        None: () => (failwith(Errors.missing_sender_bytes) as bytes),
        Some: (ch: bytes) => ch
    });
};

export const decode_bytes_exn = (player_bytes : bytes, user_bytes : bytes, player_secret : nat): action => { 
    let hashed = Crypto.sha512(Bytes.pack([player_bytes, player_secret]));
    if (hashed == user_bytes) {
        return match ((Bytes.unpack(player_bytes) as option<action>), {
            None: () => failwith(Errors.failed_to_unpack_payload),
            Some: (x: action) => x
        });
    } else {
        return failwith(Errors.failed_to_open_bytes);
    }
};

// @inline
const resolve = (first : decoded_player_action, second : decoded_player_action) : option<player> => { 
    let result : option<player> = match (first.action, {
        Stone: () => match (second.action, {
            Stone: () => None(),
            Paper: () => Some(second.player),
            Cisor: () => Some(first.player)
        }),
        Paper: () => match (second.action, {
            Stone: () => Some(first.player),
            Paper: () => None(),
            Cisor: () => Some(second.player)
        }),
        Cisor: () => match (second.action, {
            Stone: () => Some(second.player),
            Paper: () => Some(first.player),
            Cisor: () => None()
        })
    });
    return result;
};

// TODO , this implementation can handle only 2 players :(
const update_board = (sess : t, current_round : round) : board => {
    // process actions for current_round
    let pactions : decoded_player_actions = match (Map.find_opt(current_round, sess.decoded_rounds), {
        None: () => (failwith("Missing actions for current_round") as decoded_player_actions),
        Some: (pacts: decoded_player_actions) => pacts
    });
    let first : decoded_player_action = match (List.head_opt(pactions), {
        None: () => (failwith("Missing actions for first player") as decoded_player_action),
        Some: (act: decoded_player_action) => act
    });
    let next_players_opt : option<list<decoded_player_action>> = List.tail_opt(pactions);
    let next_players : list<decoded_player_action> = match (next_players_opt, {
        None: () => (failwith("Missing actions for second player") as list<decoded_player_action>),
        Some: (tl: list<decoded_player_action>) => tl
    });
    let second : decoded_player_action = match (List.head_opt(next_players), {
        None: () => (failwith("Missing actions for second player") as decoded_player_action),
        Some: (act: decoded_player_action) => act
    });
    let result : option<player> = resolve(first, second);
    return match (result, { 
        None: () => Map.update(current_round, (None() as option<option<player>>), sess.board),
        Some: (r: player) => Map.update(current_round, (Some(Some(r))), sess.board)
    });
};

export const finalize_current_round = (session: t) : t => {
    // retrieve decoded_player_actions of given roundId
    let performed_actions : decoded_player_actions = match (Map.find_opt(session.current_round, session.decoded_rounds), {
        None: () => (list([]) as decoded_player_actions),
        Some: (pacts: decoded_player_actions) => pacts
    });
    // verify all players have revealed
    let all_player_have_revealed = ([accAndList, elt] : [[bool, decoded_player_actions], player]) : [bool, decoded_player_actions] => {
        let [acc, pactions] = accAndList;        
        return [acc && has_played(pactions, elt), pactions];
    };
    let [check_all_players_have_revealed, _all_decoded_actions] : [bool, decoded_player_actions] = List.fold(all_player_have_revealed, session.players, [true, performed_actions]);
    // all players have given their actions, now the board can be updated and session goes to next round
    if (check_all_players_have_revealed == true) { 
        return { ...session, current_round:session.current_round+(1 as nat), board:update_board(session, session.current_round) };
    } else {
        return session;
    }
};
        
const compute_result = (sess: t) : result => {
    // parse board and compute who won
    let compute_points = ([acc, elt] : [map<address, nat> , [round, option<player>]]) : map<address, nat> => {
        return match (elt[1], {
            None: () => acc,
            Some: (winner_round: player) => match (Map.find_opt(winner_round, acc), {
                None: () => Map.add(winner_round, (1 as nat), acc),
                Some: (old_value) => Map.update(winner_round, (Some(old_value + (1 as nat))), acc)
            })
        });
    };
    let final_scores = Map.fold(compute_points, sess.board, (Map.empty as map<address, nat>));
    let [winner_addr, winner_points, multiple_winners] : [option<address>, nat, bool] = [(None() as option<address>), (0 as nat), false];
    let leader_score = ([acc, elt] : [[option<address>, nat, bool], [address, nat]]) : [option<address>, nat, bool] => {
        let [win_addr, win_points, multiple] = acc;
        return match (win_addr, {
            None: () => [Some(elt[0]), elt[1], false],
            Some: (_temp_win_addr: address) => {
                if (elt[1] > win_points) { 
                    return [Some(elt[0]), elt[1], false]
                } else {
                    if (elt[1] == win_points) {
                        return [win_addr, win_points, true]
                    } else {
                        return [win_addr, win_points, multiple]
                    }
                }
            }
        });
    }; 
    let [final_winner_addr, _final_winner_points, final_multiple] = Map.fold(leader_score, final_scores, [winner_addr, winner_points, multiple_winners]);
    if (final_multiple) {
        return Draw()
    } else {
        return match (final_winner_addr, {
            None: () => Draw(),
            Some: (x: address) => Winner(x)
        })
    }
};

export const finalize_session = (session: t) : t => {
    if (session.current_round > session.total_rounds) {
        return { ...session, result: compute_result(session) };
    } else  {
        return session;
    }
};
