#import "errors.jsligo" "Errors"
#import "parameter.jsligo" "Parameter"
#import "session.jsligo" "Session"
#import "conditions.jsligo" "Conditions"

export type t = {
    metadata : big_map<string, bytes>,
    next_session : nat,
    sessions : map<nat, Session.t>
};

export const update_sessions = (storage : t, sessionId : nat, new_session : Session.t): t => {
    return { ...storage, sessions: Map.update(sessionId, (Some(new_session)), storage.sessions)}
};

export const getSession = (sessionId : nat, store : t) : Session.t => {
    return match (Map.find_opt(sessionId, store.sessions), {
        None: () => (failwith(Errors.unknown_session) as Session.t),
        Some: (sess: Session.t) => sess
    });
};
